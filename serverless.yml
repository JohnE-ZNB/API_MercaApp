service: mercaapp

plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

frameworkVersion: '2'

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiName: api-gateway-merca-app # Overwrite default API Gateway name. Default is ${self:provider.stage}-${self:service}
  endpointType: REGIONAL
  environment:
    DEBUG: true
    NODE_PATH: "./:/opt/node_modules"
    NODE_ENV: dev
    DB_USER: db_user_mercaapp
    DB_PASS: ZJYvNbt4C5iBGfDl
    DB_HOST: cluster0.zwdlp.mongodb.net
    DB_NAME: mercaApp_db
    SIZE_ID_PRODUCT: 24

package:
  patterns: 
    - '!node_modules/**'

layers:
  nodejs:
    path: nodejs
    description: "Dependencias de node js"
    compatibleRuntimes:
      - nodejs14.x
      - nodejs12.x
      - nodejs10.x
    package:
      patterns: 
        - node_modules/**

custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: ApiMercaApp
        description: Esta API permite hacer administrar tus productos de forma basica
      contact:
          name: "John Edison Cortes"
          url: "https://www.linkedin.com/in/john-edison-cortes-rivera-074249160/"
          email: "johne.cr@hotmail.com"
      tags:
        -
          name: Administracion MercaApp
          description: Adminitracion de Productos MercaApp
    models:
      - name: CrearProducto
        contentType: "application/json"
        schema:
          required: 
            - nombre
            - descripcion
            - categoria
            - precio
            - cantidad
          properties:
            nombre:
              type: string
            descripcion:
              type: string
            categoria:
              type: string
            precio:
              type: number
            cantidad:
              type: number
      - name: ActualizarProducto
        contentType: "application/json"
        schema:
          properties:
            nombre:
              type: string
            descripcion:
              type: string
            categoria:
              type: string
            precio:
              type: number
            cantidad:
              type: number

functions:
  lib-mongodb:
    handler: src/lib/mongoDB.MongoLib
    name: mercaapp-lambda-lib-mongoDB
    description: Liberia que se encarga de hacer una conexion a mongo y adicional CRUD de colecciones
    timeout: 10 
    layers:
      - { Ref: NodejsLambdaLayer}
  getProducts:
    handler: src/routes/products/getProducts.getProducts
    name: mercaapp-lambda-get-products
    description: Servicio para obtener todos los productos de la app
    timeout: 10
    events:
      - http:
          method: get
          path: productos
          cors: true
          documentation:
            summary: "Get Products Service"
            description: "Servicio para consultar todos los productos"
    layers:
      - { Ref: NodejsLambdaLayer}
  getProduct:
    handler: src/routes/products/getProduct.getProduct
    name: mercaapp-lambda-get-product
    description: Servicio para obtener el detalle de un solo producto de la app
    timeout: 10
    events:
      - http:
          method: get
          path: productos/{productId}
          cors: true
          documentation:
            summary: "Get Product by Id Service"
            description: "Servicio para consultar solo un producto por medio de su Id"
            tags:
              - pathParameters - productId
            pathParams:
            - name: "productId"
              description: "Es el ID del producto que se va a consultar"
              schema:
                type: "string"
          request:
            parameters:
              paths:
                productId: true
    layers:
      - { Ref: NodejsLambdaLayer}
  createProduct:
    handler: src/routes/products/createProduct.createProduct
    name: mercaapp-lambda-create-product
    description: Servicio para crear un solo producto en la app
    timeout: 10
    events:
      - http:
          documentation:
            summary: "Create Product Service"
            description: "Crear un nuevo usuario"
            tags:
              - Body - nombre
              - Body - descripcion
              - Body - categoria
              - Body - precio
              - Body - nombre
              - Body - cantidad
            requestModels:
              "application/json": CrearProducto
          method: post
          path: productos
          cors: true
          reqValidatorName: onlyBody
    layers:
      - { Ref: NodejsLambdaLayer}
  updateProduct:
    handler: src/routes/products/updateProduct.updateProduct
    name: mercaapp-lambda-update-product
    description: Servicio para actualizar un solo producto en la app
    timeout: 10
    events:
      - http:
          documentation:
            summary: "Update Product Service"
            description: "Actualizar un producto"
            tags:
              - pathParameters[productId]
              - Body - nombre - Opcional
              - Body - descripcion - Opcional
              - Body - categoria - Opcional
              - Body - precio - Opcional
              - Body - nombre - Opcional
              - Body - cantidad - Opcional
            pathParams:
            - name: "productId"
              description: "Es el ID del producto que se va actualizar"
              schema:
                type: "string"
          method: put
          path: productos/{productId}
          cors: true
          reqValidatorName: allBodyAndParameters
          request:
            parameters:
              paths:
                productId: true
    layers:
      - { Ref: NodejsLambdaLayer}
  deleteProduct:
    handler: src/routes/products/deleteProduct.deleteProduct
    name: mercaapp-lambda-delete-product
    description: Servicio para actualizar un solo producto en la app
    timeout: 10
    events:
      - http:
          method: delete
          path: productos/{productId}
          cors: true
          documentation:
            summary: "Delete Product Service"
            description: "Eliminar un usuario"
            pathParams:
            - name: "productId"
              description: "Es el ID del producto que se va actualizar"
              schema:
                type: "string"
          reqValidatorName: onlyParameters
          request:
            parameters:
              paths:
                productId: true
    layers:
      - { Ref: NodejsLambdaLayer}

resources:
  Resources:
    onlyBody:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    onlyParameters:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-Parameters'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true
    allBodyAndParameters:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'all-Body-And-Parameters'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true
    GatewayResponseDefault400:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_4XX
        ResponseTemplates:
          application/json: "{\"MsgRsAPI\":{\"StatusCode\":400,\"Message\":$context.error.messageString,\"validation\":\"$context.error.validationErrorString\",\"Type\":\"$context.error.responseType\"}}"
    GatewayResponseDefault500:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_5XX
        ResponseTemplates:
          application/json: "{\"MsgRsAPI\":{\"StatusCode\":500,\"Message\":$context.error.messageString,\"validation\":\"$context.error.validationErrorString\",\"Type\":\"$context.error.responseType\"}}"
    GatewayResponseBadRequestBody:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        ResponseType: BAD_REQUEST_BODY
        ResponseTemplates:
          application/json: "{\"MsgRsAPI\":{\"StatusCode\":400,\"Message\":$context.error.messageString,\"validation\":\"$context.error.validationErrorString\",\"Type\":\"$context.error.responseType\"}}"
    GatewayResponseBadRequestParameters:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        ResponseType: BAD_REQUEST_PARAMETERS
        ResponseTemplates:
          application/json: "{\"MsgRsAPI\":{\"StatusCode\":400,\"Message\":$context.error.messageString,\"validation\":\"$context.error.validationErrorString\",\"Type\":\"$context.error.responseType\"}}"